---
alwaysApply: true
---
# 블로그 글 작성 가이드

이 규칙은 `posts/` 폴더에 있는 기존 블로그 글의 형식을 따라 새로운 블로그 포스트를 작성합니다.

## 작성 프로세스

### 1단계: 최신 정보 수집 (필수) - Tavily-MCP 사용

⚠️ **필수**: 블로그 글 작성 시 반드시 **Tavily-MCP** 도구를 사용하여 웹 검색을 수행하세요!

#### Tavily-MCP 검색 방법

**기본 검색**:
```
mcp_tavily-mcp_tavily-search 도구 사용
- query: 검색어 입력
- max_results: 10-20 (충분한 정보 수집)
- search_depth: "advanced" (심화 검색 권장)
- topic: "general" 또는 "news" (주제에 따라 선택)
```

**검색 전략**:
- 여러 검색 쿼리를 **병렬로** 실행하여 다양한 관점의 정보를 얻습니다
- 주제별로 2-4개의 검색 쿼리 실행
- 최신 버전, 최신 사용법, 최근 변경사항을 반드시 확인합니다
- 2024-2025년 최신 정보를 우선적으로 참고합니다

**검색 예시**:
```
주제: "React Hooks"인 경우

검색 1: "React Hooks 최신 버전 2025"
검색 2: "React Hooks useState useEffect 사용법"
검색 3: "React Hooks 실전 예제"
검색 4: "React Hooks 흔한 실수"
```

### 2단계: 기존 포스트 구조 참고
참고 파일: [welcome.md](mdc:posts/welcome.md), [giscus-setup.md](mdc:posts/giscus-setup.md), [github-pages-deploy.md](mdc:posts/github-pages-deploy.md), [markdown-guide.md](mdc:posts/markdown-guide.md)

## 블로그 글 구조 (필수 형식)

### 📌 제목
```markdown
# 제목 작성하기 + 관련 이모지
```
- 이모지 1-2개 포함
- 명확하고 흥미로운 제목

### 📝 소개 문단
- 간단한 소개 (1-2문장)
- 독자가 이 글에서 무엇을 배울 수 있는지 명시

### 📚 본문 구조

#### 개념 설명 섹션
```markdown
## [주제]란?

- 핵심 개념 설명
- 왜 중요한지, 어떤 장점이 있는지

### 장점/특징

- ✅ 장점 1
- ✅ 장점 2
- ✅ 장점 3
```

#### 실습/구현 섹션 (해당하는 경우)
```markdown
## 단계별 가이드

### 1단계: [작업명]

1. 구체적인 단계
2. 스크린샷이나 코드 예시
3. 주의사항

### 2단계: [작업명]

...
```

#### 코드 예시 (해당하는 경우)
- 실제 동작하는 코드 제공
- 주석으로 설명 추가
- 언어 태그 지정 (javascript, python, bash 등)

```javascript
// 코드 예시는 이렇게 작성
function example() {
  console.log('Hello');
}
```

#### 문제 해결 섹션
```markdown
## 문제 해결

### 문제 1

**원인**: 원인 설명

**해결**:
1. 해결 방법 1
2. 해결 방법 2
```

### 🎯 마무리
```markdown
---

마무리 메시지 (1-2문장)

댓글 유도 문구 추가
```

## 작성 가이드라인

### 스타일
1. **한국어로 작성**: 모든 내용은 한국어로 작성
2. **친근하고 이해하기 쉽게**: 초보자도 이해할 수 있게 설명
3. **이모지 활용**: 제목과 중요 포인트에 이모지 사용 (과하지 않게)
4. **존댓말 사용**: "~입니다", "~세요" 형식

### 내용
1. **실용성**: 실제로 따라할 수 있는 실용적인 내용
2. **최신성**: 웹 검색으로 확인한 최신 정보 사용
3. **단계별 설명**: 복잡한 내용은 단계별로 나눠서 설명
4. **예시 포함**: 코드나 명령어는 반드시 예시 포함
5. **문제 해결**: 흔히 발생하는 문제와 해결 방법 포함

### 길이
- 최소 100줄 이상
- 너무 짧지 않게, 충분히 자세하게 작성
- 필요하면 300줄 이상도 가능

### 마크다운 요소 활용
- `##`, `###` 제목으로 구조화
- `**굵게**`, `*기울임*` 강조
- `` `인라인 코드` `` 사용
- 코드 블록 (```)
- 리스트 (-, 1., 2.)
- 인용구 (>)
- 링크 [텍스트](URL)
- 수평선 (---)

## 파일명 규칙

파일명은 영문 소문자와 하이픈(-)만 사용:
- ✅ `react-hooks-guide.md`
- ✅ `python-web-scraping.md`
- ❌ `React Hooks 가이드.md`
- ❌ `python_tutorial.md`

## 작성 워크플로우

1. **Tavily-MCP 웹 검색 수행** ⚠️ **필수!**
   - **반드시** `mcp_tavily-mcp_tavily-search` 도구 사용
   - 주제 관련 최신 정보 검색 (2-4개 쿼리)
   - 공식 문서, 최신 튜토리얼 확인
   - 2024-2025년 정보 우선
   - search_depth: "advanced" 권장

2. **정보 정리**
   - 핵심 개념 추출
   - 실용적인 예시 수집
   - 최신 버전/사용법 확인

3. **글 작성**
   - 위의 구조에 따라 작성
   - 초보자 관점에서 설명
   - 단계별로 자세하게

4. **메타데이터 추가**
   - `js/main.js`에 포스트 메타데이터 추가
   - `js/post-loader.js`에도 동일한 메타데이터 추가
   - id, title, date, excerpt, tags 정보 입력

5. **posts.json 생성** ⚠️ **필수!**
   - 다음 명령어 실행: `node .github/scripts/generate-posts.js`
   - 이 명령어는 posts 폴더를 스캔하여 자동으로 posts.json 생성
   - 반드시 글 작성 후 매번 실행해야 함

6. **검토**
   - 문법 확인
   - 코드 예시 동작 확인
   - 누락된 정보 없는지 확인

## 예시 작업 흐름

```
사용자: "React Hooks에 대해 블로그 글 써줘"

1. Tavily-MCP 웹 검색 수행 (병렬 실행):
   
   검색 1 - mcp_tavily-mcp_tavily-search:
   {
     query: "React Hooks 최신 버전 2025",
     max_results: 10,
     search_depth: "advanced",
     topic: "general"
   }
   
   검색 2 - mcp_tavily-mcp_tavily-search:
   {
     query: "React Hooks useState useEffect 실전 사용법",
     max_results: 10,
     search_depth: "advanced"
   }
   
   검색 3 - mcp_tavily-mcp_tavily-search:
   {
     query: "React Hooks 예제 코드 2025",
     max_results: 10,
     search_depth: "basic"
   }

2. 정보 수집 및 정리
   - Tavily 검색 결과에서 최신 정보 추출
   - 신뢰할 수 있는 출처 우선 (공식 문서, 유명 블로그)
   - 실용적인 예시 수집

3. 블로그 글 작성:
   posts/react-hooks-guide.md 생성
   - 제목: # React Hooks 완벽 가이드 🎣
   - 소개: React Hooks는...
   - 개념 설명 (검색 결과 기반)
   - useState, useEffect 등 설명
   - 실습 예시 (최신 버전 반영)
   - 문제 해결
   - 마무리

4. 메타데이터 추가 (js/main.js, js/post-loader.js)

5. posts.json 생성:
   node .github/scripts/generate-posts.js

6. 완성!
```

## 중요 사항

- 🔴 **Tavily-MCP 필수 사용**: 반드시 `mcp_tavily-mcp_tavily-search` 도구로 웹 검색
- ⚠️ **절대 오래된 정보 사용 금지**: 반드시 Tavily 검색으로 최신 정보 확인
- ⚠️ **복사 금지**: 검색한 내용을 그대로 복사하지 말고 이해하기 쉽게 재작성
- ⚠️ **초보자 관점**: 비개발자도 이해할 수 있게 작성
- ⚠️ **검증된 정보**: 공식 문서나 신뢰할 수 있는 출처의 정보 사용

## 🔍 Tavily-MCP 사용 가이드

### 언제 사용하나요?
- **모든 블로그 글 작성 시 필수!**
- 주제에 대한 최신 정보가 필요할 때
- 여러 출처의 정보를 비교하고 싶을 때
- 최신 트렌드나 뉴스를 다룰 때

### 어떻게 사용하나요?

#### 기본 사용법
```javascript
mcp_tavily-mcp_tavily-search({
  query: "검색할 내용",
  max_results: 10,
  search_depth: "advanced",
  topic: "general"
})
```

#### 파라미터 설명
- `query`: 검색어 (구체적이고 명확하게)
- `max_results`: 5-20 (정보량에 따라 조절)
- `search_depth`: 
  - "basic": 빠른 검색
  - "advanced": 심화 검색 (권장)
- `topic`:
  - "general": 일반 주제
  - "news": 뉴스/트렌드 주제
- `include_raw_content`: true (상세 정보 필요 시)
- `time_range`: "day", "week", "month", "year" (시간 제한 필요 시)

#### 실전 예시

**기술 튜토리얼 작성 시**:
```javascript
// 검색 1: 개념 이해
mcp_tavily-mcp_tavily-search({
  query: "Python 데이터 분석 pandas 기초 2025",
  max_results: 10,
  search_depth: "advanced",
  topic: "general"
})

// 검색 2: 실전 예제
mcp_tavily-mcp_tavily-search({
  query: "pandas 데이터 분석 실전 예제 코드",
  max_results: 10,
  search_depth: "advanced"
})

// 검색 3: 문제 해결
mcp_tavily-mcp_tavily-search({
  query: "pandas 흔한 에러 해결 방법",
  max_results: 5,
  search_depth: "basic"
})
```

**최신 트렌드 작성 시**:
```javascript
mcp_tavily-mcp_tavily-search({
  query: "AI 최신 트렌드 2025",
  max_results: 20,
  search_depth: "advanced",
  topic: "news",
  time_range: "month"  // 최근 1개월 정보
})
```

### 검색 팁
1. **병렬 검색**: 여러 쿼리를 동시에 실행하여 시간 절약
2. **구체적인 쿼리**: "React"보다 "React Hooks useState 사용법 2025"
3. **다양한 관점**: 개념 설명, 실습 예제, 문제 해결 등 여러 각도로 검색
4. **최신성 확인**: 연도를 쿼리에 포함 (예: "2025", "최신")
5. **advanced 모드 우선**: 더 깊이 있는 정보 수집

## 📌 블로그 글 작성 후 필수 작업

### posts.json 자동 생성 (필수!)

블로그 글을 작성한 후 **반드시** 다음 명령어를 실행하세요:

```bash
node .github/scripts/generate-posts.js
```

#### 왜 필요한가요?

- 이 스크립트는 `posts/` 폴더의 모든 마크다운 파일을 자동으로 스캔
- 각 파일에서 제목, 요약, 태그를 자동 추출
- `posts.json` 파일을 생성하여 포스트 메타데이터 관리
- 블로그 목록 페이지에서 포스트를 정확히 표시하기 위해 필수

#### 무엇을 하나요?

1. `posts/` 폴더의 모든 `.md` 파일 검색
2. 각 파일에서 자동으로 메타데이터 추출:
   - 제목 (첫 번째 # 헤딩)
   - 요약 (첫 문단)
   - 생성 날짜 (파일 생성 시간)
   - 태그 (내용 기반 자동 생성)
3. `posts.json` 파일 생성 및 업데이트

#### 실행 결과 예시

```bash
📝 포스트 파일 스캔 중...

✅ 5개의 마크다운 파일 발견

  ✓ ai-news-trends-2025
    제목: 2025년 주목해야 할 최신 AI 트렌드 🤖✨
    태그: AI, 트렌드, 뉴스

✨ posts.json 파일이 생성되었습니다!
```

### ⚠️ 주의사항

- 새 글을 작성할 때마다 실행해야 합니다
- 기존 글을 수정한 경우에도 실행하세요
- 실행하지 않으면 블로그 목록에 글이 표시되지 않을 수 있습니다